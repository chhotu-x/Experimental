<%- include('header') %>

<!-- Load Main.js for automation features -->
<script src="/js/main.js"></script>

<!-- Automation Engine Section -->
<section class="py-5 bg-gradient-primary text-white">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 text-center">
                <h1 class="display-5 fw-bold mb-3">üöÄ Advanced Automation Engine</h1>
                <p class="lead mb-4">
                    Harness the power of massive-scale automation with AI-powered element detection, 
                    parallel processing, and real-time control systems.
                </p>
                <div class="d-flex justify-content-center gap-3 mb-4">
                    <div class="badge bg-light text-dark px-3 py-2">
                        <i class="fas fa-robot me-1"></i>
                        AI-Powered Detection
                    </div>
                    <div class="badge bg-light text-dark px-3 py-2">
                        <i class="fas fa-parallel"></i>
                        Parallel Processing
                    </div>
                    <div class="badge bg-light text-dark px-3 py-2">
                        <i class="fas fa-chart-line me-1"></i>
                        Real-time Analytics
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Multi-Embedder Dashboard -->
<section class="py-5 bg-light">
    <div class="container">
        <div class="row">
            <div class="col-12 mb-4">
                <h2 class="text-center mb-4">üåê Multi-Embedder Dashboard</h2>
                <div class="row g-3">
                    <div class="col-md-3">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body text-center">
                                <i class="fas fa-robot fa-2x text-primary mb-2"></i>
                                <h5 class="card-title">Active Embedders</h5>
                                <h3 class="text-primary mb-0" id="activeEmbeddersCount">0</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body text-center">
                                <i class="fas fa-plus-circle fa-2x text-success mb-2"></i>
                                <h5 class="card-title">Total Created</h5>
                                <h3 class="text-success mb-0" id="totalCreatedCount">0</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body text-center">
                                <i class="fas fa-memory fa-2x text-warning mb-2"></i>
                                <h5 class="card-title">Memory Usage</h5>
                                <h3 class="text-warning mb-0" id="memoryUsagePercent">0%</h3>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card border-0 shadow-sm">
                            <div class="card-body text-center">
                                <i class="fas fa-tachometer-alt fa-2x text-info mb-2"></i>
                                <h5 class="card-title">Response Time</h5>
                                <h3 class="text-info mb-0" id="averageResponseTime">0ms</h3>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Performance Bars -->
        <div class="row mb-4">
            <div class="col-md-6">
                <h6>Memory Usage</h6>
                <div class="progress">
                    <div class="progress-bar bg-warning" role="progressbar" style="width: 0%" id="memoryProgressBar"></div>
                </div>
            </div>
            <div class="col-md-6">
                <h6>CPU Usage</h6>
                <div class="progress">
                    <div class="progress-bar bg-info" role="progressbar" style="width: 0%" id="cpuProgressBar"></div>
                </div>
            </div>
        </div>
        
        <!-- Parallel Website Embedding Controls -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-warning">
                    <div class="card-header bg-warning text-dark">
                        <h5 class="mb-0">üåê Parallel Website Embedding - 1M Scale</h5>
                        <small>Embed 1 million instances of the same website from a single URL</small>
                    </div>
                    <div class="card-body">
                        <div class="row align-items-end mb-3">
                            <div class="col-md-6">
                                <label for="massEmbedUrl" class="form-label">Website URL to Embed</label>
                                <input type="url" class="form-control" id="massEmbedUrl" 
                                       placeholder="https://example.com" value="https://example.com">
                            </div>
                            <div class="col-md-3">
                                <label for="embedCount" class="form-label">Number of Instances</label>
                                <select class="form-select" id="embedCount">
                                    <option value="1000">1,000</option>
                                    <option value="10000">10,000</option>
                                    <option value="100000">100,000</option>
                                    <option value="1000000" selected>1,000,000</option>
                                </select>
                            </div>
                            <div class="col-md-3">
                                <button class="btn btn-warning w-100" onclick="startMassiveParallelEmbedding()">
                                    <i class="fas fa-rocket me-2"></i>Start Parallel Embedding
                                </button>
                            </div>
                        </div>
                        <div id="parallelEmbeddingProgress" class="d-none">
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="progress">
                                        <div class="progress-bar progress-bar-striped progress-bar-animated bg-warning" 
                                             role="progressbar" style="width: 0%" id="embeddingProgressBar"></div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <span id="embeddingProgressText">0 / 0</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Grand Automation Controls -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">üéÆ Grand Automation Controls - 1M Website Control</h5>
                        <small>Control 1 million websites simultaneously with one automation configuration</small>
                    </div>
                    <div class="card-body">
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="automationAction" class="form-label">Automation Action</label>
                                <select class="form-select" id="automationAction">
                                    <option value="click">Click Element</option>
                                    <option value="scroll">Scroll Page</option>
                                    <option value="fill">Fill Form</option>
                                    <option value="extract">Extract Data</option>
                                    <option value="navigate">Navigate URL</option>
                                    <option value="screenshot">Take Screenshot</option>
                                </select>
                            </div>
                            <div class="col-md-4">
                                <label for="actionTarget" class="form-label">Target Selector/Data</label>
                                <input type="text" class="form-control" id="actionTarget" 
                                       placeholder="CSS selector or data">
                            </div>
                            <div class="col-md-4">
                                <label for="executionMode" class="form-label">Execution Mode</label>
                                <select class="form-select" id="executionMode">
                                    <option value="parallel">Parallel (Fast)</option>
                                    <option value="waves">Wave Processing</option>
                                    <option value="sequential">Sequential (Safe)</option>
                                </select>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <button class="btn btn-success me-2" onclick="executeGrandAutomation()">
                                    <i class="fas fa-play me-2"></i>Execute on All Websites
                                </button>
                                <button class="btn btn-info me-2" onclick="previewAutomation()">
                                    <i class="fas fa-eye me-2"></i>Preview Action
                                </button>
                                <button class="btn btn-danger" onclick="stopAllAutomation()">
                                    <i class="fas fa-stop me-2"></i>Emergency Stop
                                </button>
                            </div>
                            <div class="col-md-4">
                                <div class="text-end">
                                    <small class="text-muted">
                                        Target Websites: <span id="targetWebsiteCount" class="fw-bold">0</span>
                                    </small>
                                </div>
                            </div>
                        </div>
                        <div id="grandAutomationProgress" class="d-none mt-3">
                            <div class="row">
                                <div class="col-md-10">
                                    <div class="progress">
                                        <div class="progress-bar bg-success progress-bar-striped progress-bar-animated" 
                                             role="progressbar" style="width: 0%" id="grandProgressBar"></div>
                                    </div>
                                </div>
                                <div class="col-md-2">
                                    <small id="grandProgressText">0 / 0</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Embedder Controls -->
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">Basic Embedder Management</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2 mb-3">
                            <button class="btn btn-primary" onclick="createEmbedders()">
                                <i class="fas fa-plus me-2"></i>Create 10 Embedders
                            </button>
                            <button class="btn btn-success" onclick="createMassiveEmbedders()">
                                <i class="fas fa-rocket me-2"></i>Create 100 Embedders
                            </button>
                            <button class="btn btn-danger" onclick="clearAllEmbedders()">
                                <i class="fas fa-trash me-2"></i>Clear All Embedders
                            </button>
                        </div>
                        
                        <div id="embedderList">
                            <div class="text-center text-muted p-3">
                                <i class="fas fa-robot fa-2x mb-2"></i>
                                <div>No embedders created yet</div>
                                <small>Click "Create Embedders" to start</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h5 class="mb-0">System Performance</h5>
                    </div>
                    <div class="card-body" id="performanceMonitor">
                        <p class="text-muted">Performance monitoring will appear here...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Automation Templates -->
<section class="py-5">
    <div class="container">
        <div class="row">
            <div class="col-12 mb-4">
                <h2 class="text-center mb-4">ü§ñ Automation Templates</h2>
            </div>
        </div>
        
        <div class="row g-4 mb-5">
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-fill-drip fa-3x text-primary mb-3"></i>
                        <h5 class="card-title">Smart Form Filler</h5>
                        <p class="card-text">Intelligent form field detection and filling with advanced validation.</p>
                        <button class="btn btn-outline-primary" onclick="runTemplate('smart-form-filler')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-database fa-3x text-success mb-3"></i>
                        <h5 class="card-title">Data Harvester</h5>
                        <p class="card-text">Advanced data extraction with structure analysis and parallel processing.</p>
                        <button class="btn btn-outline-success" onclick="runTemplate('data-harvester')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-rocket fa-3x text-danger mb-3"></i>
                        <h5 class="card-title">Performance Tester</h5>
                        <p class="card-text">Comprehensive performance testing suite with real-time metrics.</p>
                        <button class="btn btn-outline-danger" onclick="runTemplate('performance-tester')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-compass fa-3x text-warning mb-3"></i>
                        <h5 class="card-title">Intelligent Navigator</h5>
                        <p class="card-text">Smart navigation with content analysis and adaptive strategies.</p>
                        <button class="btn btn-outline-warning" onclick="runTemplate('intelligent-navigator')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-network-wired fa-3x text-info mb-3"></i>
                        <h5 class="card-title">Multi-Embedder Demo</h5>
                        <p class="card-text">Demonstrate multi-embedder architecture with parallel operations.</p>
                        <button class="btn btn-outline-info" onclick="runTemplate('multi-embedder-demo')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-infinity fa-3x text-dark mb-3"></i>
                        <h5 class="card-title">Unlimited Operations</h5>
                        <p class="card-text">Process beyond 100,000 operations with unlimited mode.</p>
                        <button class="btn btn-outline-dark" onclick="runTemplate('unlimited-operations')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-danger shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-tools fa-3x text-danger mb-3"></i>
                        <h5 class="card-title">üîß Fix Broken Functions</h5>
                        <p class="card-text">Comprehensive repair system for all embedder and automation functions.</p>
                        <button class="btn btn-danger" onclick="runTemplate('fix-broken-embedders')">
                            Run Repair
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-warning shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-globe-americas fa-3x text-warning mb-3"></i>
                        <h5 class="card-title">üåê 1M Parallel Embedding</h5>
                        <p class="card-text">Embed 1 million instances of the SAME website from one link.</p>
                        <button class="btn btn-warning" onclick="runTemplate('million-website-parallel')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card h-100 border-success shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-crown fa-3x text-success mb-3"></i>
                        <h5 class="card-title">üéÆ Grand Automation Control</h5>
                        <p class="card-text">Control 1M websites with ONE automation configuration.</p>
                        <button class="btn btn-success" onclick="runTemplate('grand-automation-control')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="row g-4 mb-5">
            <div class="col-md-4">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body text-center">
                        <i class="fas fa-comments fa-3x text-primary mb-3"></i>
                        <h5 class="card-title">Cross-Embedder Communication</h5>
                        <p class="card-text">Demonstrate inter-embedder communication and messaging.</p>
                        <button class="btn btn-outline-primary" onclick="runTemplate('cross-embedder-communication')">
                            Run Template
                        </button>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Custom Script Editor -->
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Custom Automation Script</h5>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="loadAutomationTemplate('custom')">
                                Reset to Default
                            </button>
                            <button type="button" class="btn btn-primary btn-sm" onclick="executeCustomScript()">
                                <i class="fas fa-play me-1"></i>Execute Script
                            </button>
                        </div>
                    </div>
                    <div class="card-body">
                        <textarea class="form-control font-monospace" id="customScript" rows="15" 
                                  placeholder="Write your custom automation script here..."></textarea>
                        <div class="mt-3">
                            <small class="text-muted">
                                <strong>Available APIs:</strong> 
                                AutomationBatch(), window.automationEngine.waitingStrategies, 
                                window.multiEmbedderManager, wait(ms)
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Results Section -->
<section class="py-4 bg-light">
    <div class="container">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Automation Results</h5>
                        <button class="btn btn-outline-secondary btn-sm" onclick="clearResults()">
                            <i class="fas fa-trash me-1"></i>Clear
                        </button>
                    </div>
                    <div class="card-body">
                        <div id="automationResults" class="bg-dark text-light p-3 rounded font-monospace" style="min-height: 200px; overflow-y: auto;">
                            <div class="text-success">üöÄ Advanced Automation Engine Ready</div>
                            <div class="text-muted">Run any template or custom script to see results here...</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
.bg-gradient-primary {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
}

.progress {
    height: 8px;
}

.card {
    transition: transform 0.2s ease-in-out;
}

.card:hover {
    transform: translateY(-2px);
}

#automationResults {
    max-height: 400px;
    font-size: 0.9em;
    line-height: 1.4;
}

.font-monospace {
    font-family: 'Courier New', Courier, monospace;
}
</style>

<script>
// Enhanced automation UI functions

// ============================================================================
// üåê MASSIVE PARALLEL EMBEDDING SYSTEM
// ============================================================================

async function startMassiveParallelEmbedding() {
    const url = document.getElementById('massEmbedUrl').value;
    const count = parseInt(document.getElementById('embedCount').value);
    
    if (!url.trim()) {
        logResult('‚ùå Please enter a valid URL');
        return;
    }
    
    logResult(`üöÄ Starting massive parallel embedding: ${count.toLocaleString()} instances of ${url}`);
    
    // Show progress UI
    const progressDiv = document.getElementById('parallelEmbeddingProgress');
    const progressBar = document.getElementById('embeddingProgressBar');
    const progressText = document.getElementById('embeddingProgressText');
    
    progressDiv.classList.remove('d-none');
    progressBar.style.width = '0%';
    progressText.textContent = `0 / ${count.toLocaleString()}`;
    
    const startTime = performance.now();
    let completedCount = 0;
    
    try {
        // Create embedders in batches for performance
        const batchSize = 1000;
        const totalBatches = Math.ceil(count / batchSize);
        
        for (let batchIndex = 0; batchIndex < totalBatches; batchIndex++) {
            const batchStart = batchIndex * batchSize;
            const batchEnd = Math.min(batchStart + batchSize, count);
            const currentBatchSize = batchEnd - batchStart;
            
            logResult(`üì¶ Processing batch ${batchIndex + 1}/${totalBatches} (${currentBatchSize} embedders)`);
            
            // Create embedders in current batch
            const batchPromises = [];
            for (let i = batchStart; i < batchEnd; i++) {
                const embedderId = `parallel_${url.replace(/[^a-zA-Z0-9]/g, '_')}_${Date.now()}_${i}`;
                batchPromises.push(createParallelEmbedder(embedderId, url));
            }
            
            // Wait for current batch to complete
            const batchResults = await Promise.allSettled(batchPromises);
            const batchSuccessCount = batchResults.filter(r => r.status === 'fulfilled').length;
            
            completedCount += batchSuccessCount;
            
            // Update progress
            const progressPercent = (completedCount / count) * 100;
            progressBar.style.width = `${progressPercent}%`;
            progressText.textContent = `${completedCount.toLocaleString()} / ${count.toLocaleString()}`;
            
            logResult(`‚úÖ Batch ${batchIndex + 1} completed: ${batchSuccessCount}/${currentBatchSize} successful`);
            
            // Small delay between batches to prevent overwhelming
            if (batchIndex < totalBatches - 1) {
                await new Promise(resolve => setTimeout(resolve, 100));
            }
        }
        
        const totalTime = performance.now() - startTime;
        const rate = Math.round(completedCount / (totalTime / 1000));
        
        logResult(`üéâ Massive parallel embedding completed!`);
        logResult(`üìä Results: ${completedCount.toLocaleString()}/${count.toLocaleString()} embedders created`);
        logResult(`‚ö° Performance: ${rate.toLocaleString()} embedders/second`);
        logResult(`‚è±Ô∏è Total time: ${(totalTime / 1000).toFixed(2)} seconds`);
        
        updateUI();
        
    } catch (error) {
        logResult(`‚ùå Massive embedding failed: ${error.message}`);
        console.error('Massive embedding error:', error);
    }
}

async function createParallelEmbedder(embedderId, url) {
    // Create embedder with URL
    const embedder = window.multiEmbedderManager.createEmbedder(embedderId);
    
    // Simulate loading the URL (in real implementation, this would load the actual website)
    await new Promise(resolve => setTimeout(resolve, Math.random() * 50 + 10));
    
    // Update embedder with URL info
    const embedderData = window.multiEmbedderManager.embedders.get(embedderId);
    if (embedderData) {
        embedderData.url = url;
        embedderData.status = 'loaded';
        embedderData.loadTime = Date.now();
    }
    
    return embedderId;
}

// ============================================================================
// üéÆ GRAND AUTOMATION CONTROL SYSTEM
// ============================================================================

async function executeGrandAutomation() {
    const action = document.getElementById('automationAction').value;
    const target = document.getElementById('actionTarget').value;
    const mode = document.getElementById('executionMode').value;
    
    const activeEmbedders = window.multiEmbedderManager.activeEmbedders;
    if (activeEmbedders === 0) {
        logResult('‚ùå No active embedders to control. Create embedders first.');
        return;
    }
    
    logResult(`üéÆ Executing grand automation: ${action} on ${activeEmbedders.toLocaleString()} websites`);
    logResult(`üéØ Target: ${target || 'default'}, Mode: ${mode}`);
    
    // Show progress UI
    const progressDiv = document.getElementById('grandAutomationProgress');
    const progressBar = document.getElementById('grandProgressBar');
    const progressText = document.getElementById('grandProgressText');
    
    progressDiv.classList.remove('d-none');
    progressBar.style.width = '0%';
    progressText.textContent = `0 / ${activeEmbedders.toLocaleString()}`;
    
    const startTime = performance.now();
    
    try {
        // Create automation batch based on mode
        const batch = new AutomationBatch({
            unlimitedMode: mode === 'parallel',
            maxConcurrency: mode === 'parallel' ? 10000 : mode === 'waves' ? 1000 : 1,
            batchSize: mode === 'waves' ? 1000 : 5000
        });
        
        // Generate automation tasks for all embedders
        const embedderIds = Array.from(window.multiEmbedderManager.embedders.keys());
        let taskCount = 0;
        
        for (const embedderId of embedderIds) {
            const config = buildAutomationConfig(action, target, embedderId);
            batch.addTask(action, config, 1);
            taskCount++;
        }
        
        logResult(`üìã Created ${taskCount.toLocaleString()} automation tasks`);
        
        // Execute with progress tracking
        let completedTasks = 0;
        
        // Override batch progress callback
        const originalProcessAll = batch.processAll;
        batch.processAll = async function() {
            const result = await originalProcessAll.call(this);
            
            // Update progress during execution
            completedTasks = result.successCount;
            const progressPercent = (completedTasks / taskCount) * 100;
            progressBar.style.width = `${progressPercent}%`;
            progressText.textContent = `${completedTasks.toLocaleString()} / ${taskCount.toLocaleString()}`;
            
            return result;
        };
        
        const result = await batch.processAll();
        const totalTime = performance.now() - startTime;
        const rate = Math.round(result.successCount / (totalTime / 1000));
        
        logResult(`üéâ Grand automation completed!`);
        logResult(`üìä Results: ${result.successCount.toLocaleString()}/${taskCount.toLocaleString()} tasks successful`);
        logResult(`‚ö° Performance: ${rate.toLocaleString()} operations/second`);
        logResult(`‚è±Ô∏è Total time: ${(totalTime / 1000).toFixed(2)} seconds`);
        
        updateUI();
        
    } catch (error) {
        logResult(`‚ùå Grand automation failed: ${error.message}`);
        console.error('Grand automation error:', error);
    }
}

function buildAutomationConfig(action, target, embedderId) {
    const config = { embedderId };
    
    switch (action) {
        case 'click':
            config.selector = target || 'button, a, input[type="submit"]';
            break;
        case 'scroll':
            config.x = 0;
            config.y = parseInt(target) || 500;
            break;
        case 'fill':
            config.data = target ? JSON.parse(target) : { test: 'automated value' };
            break;
        case 'extract':
            config.selector = target || 'h1, h2, h3, p';
            config.type = 'text';
            break;
        case 'navigate':
            config.url = target || 'https://example.com';
            break;
        case 'screenshot':
            config.format = 'jpeg';
            config.quality = 0.8;
            break;
        default:
            config.action = action;
    }
    
    return config;
}

async function previewAutomation() {
    const action = document.getElementById('automationAction').value;
    const target = document.getElementById('actionTarget').value;
    
    logResult(`üëÅÔ∏è Previewing automation action: ${action}`);
    
    if (window.multiEmbedderManager.activeEmbedders === 0) {
        logResult('‚ùå No active embedders for preview. Create embedders first.');
        return;
    }
    
    // Get first embedder for preview
    const firstEmbedderId = Array.from(window.multiEmbedderManager.embedders.keys())[0];
    const config = buildAutomationConfig(action, target, firstEmbedderId);
    
    logResult(`üîç Preview config for embedder ${firstEmbedderId}:`);
    logResult(`üìã ${JSON.stringify(config, null, 2)}`);
    
    // Simulate preview execution
    try {
        const batch = new AutomationBatch();
        batch.addTask(action, config);
        const result = await batch.processAll();
        
        logResult(`‚úÖ Preview successful: ${result.successCount} task completed`);
    } catch (error) {
        logResult(`‚ùå Preview failed: ${error.message}`);
    }
}

function stopAllAutomation() {
    logResult('üõë Emergency stop requested - halting all automation');
    
    // In a real implementation, this would cancel all running operations
    window.multiEmbedderManager.operationsQueue = [];
    window.multiEmbedderManager.processingOperations = false;
    
    // Hide progress indicators
    document.getElementById('parallelEmbeddingProgress').classList.add('d-none');
    document.getElementById('grandAutomationProgress').classList.add('d-none');
    
    logResult('‚úÖ All automation stopped');
}

// ============================================================================
// BASIC EMBEDDER MANAGEMENT
// ============================================================================

function createEmbedders() {
    logResult('üåê Creating 10 embedders...');
    
    for (let i = 0; i < 10; i++) {
        const embedderId = window.multiEmbedderManager.createEmbedder(`ui_embedder_${Date.now()}_${i}`);
        logResult(`‚úÖ Created embedder: ${embedderId}`);
    }
    
    updateUI();
    updateTargetWebsiteCount();
    logResult('üéâ Successfully created 10 embedders!');
}

function createMassiveEmbedders() {
    logResult('üöÄ Creating 100 embedders (massive scale test)...');
    
    const startTime = performance.now();
    for (let i = 0; i < 100; i++) {
        window.multiEmbedderManager.createEmbedder(`massive_embedder_${Date.now()}_${i}`);
    }
    const endTime = performance.now();
    
    updateUI();
    updateTargetWebsiteCount();
    logResult(`üéØ Created 100 embedders in ${(endTime - startTime).toFixed(2)}ms`);
    logResult('üí™ Massive scale test completed successfully!');
}

function clearAllEmbedders() {
    logResult('üßπ Clearing all embedders...');
    
    // Reset the manager (simplified)
    window.multiEmbedderManager.embedders.clear();
    window.multiEmbedderManager.activeEmbedders = 0;
    window.multiEmbedderManager.globalStats.totalDestroyed += window.multiEmbedderManager.globalStats.totalCreated;
    window.multiEmbedderManager.globalStats.activeConnections = 0;
    
    updateEmbedderList();
    updateUI();
    updateTargetWebsiteCount();
    logResult('‚úÖ All embedders cleared!');
}

function updateTargetWebsiteCount() {
    const count = window.multiEmbedderManager?.activeEmbedders || 0;
    const targetElement = document.getElementById('targetWebsiteCount');
    if (targetElement) {
        targetElement.textContent = count.toLocaleString();
    }
}

function runTemplate(templateType) {
    logResult(`ü§ñ Running ${templateType} template...`);
    
    // Load and execute the template
    loadAutomationTemplate(templateType);
    setTimeout(() => {
        executeCustomScript();
    }, 500);
}

async function executeCustomScript() {
    const script = document.getElementById('customScript').value;
    if (!script.trim()) {
        logResult('‚ùå No script to execute');
        return;
    }
    
    logResult('‚ö° Executing custom automation script...');
    
    try {
        // Execute the script in the global context
        const result = await eval(`(async () => { ${script} })()`);
        logResult('‚úÖ Script executed successfully');
        if (result !== undefined) {
            logResult(`üìä Result: ${JSON.stringify(result)}`);
        }
    } catch (error) {
        logResult(`‚ùå Script execution failed: ${error.message}`);
        console.error('Script execution error:', error);
    }
}

function updateUI() {
    if (window.multiInstanceMonitor) {
        window.multiInstanceMonitor.updateUI();
    }
    updateGlobalStats();
    updateTargetWebsiteCount();
}

function logResult(message) {
    const resultsDiv = document.getElementById('automationResults');
    if (resultsDiv) {
        const timestamp = new Date().toLocaleTimeString();
        const logLine = document.createElement('div');
        logLine.innerHTML = `<span class="text-muted">[${timestamp}]</span> ${message}`;
        resultsDiv.appendChild(logLine);
        resultsDiv.scrollTop = resultsDiv.scrollHeight;
    }
    console.log(message);
}

function clearResults() {
    const resultsDiv = document.getElementById('automationResults');
    if (resultsDiv) {
        resultsDiv.innerHTML = `
            <div class="text-success">üöÄ Advanced Automation Engine Ready</div>
            <div class="text-muted">Run any template or custom script to see results here...</div>
        `;
    }
}

// Initialize the automation templates on page load
document.addEventListener('DOMContentLoaded', function() {
    // Load default custom script
    if (typeof loadAutomationTemplate === 'function') {
        loadAutomationTemplate('custom');
    }
    
    // Update UI periodically
    setInterval(updateUI, 2000);
    
    // Initialize target website count
    updateTargetWebsiteCount();
    
    logResult('üöÄ Automation page loaded and ready!');
    logResult('üåê Parallel embedding system initialized');
    logResult('üéÆ Grand automation controls active');
});
</script>

<%- include('footer') %>